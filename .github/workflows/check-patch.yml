name: "Update and Patch Iosevka Font"

on:
  schedule:
    - cron: "0 5 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check:
    name: Check for New Iosevka Version
    runs-on: ubuntu-latest
    outputs:
      build_needed: ${{ steps.check_local_tag.outputs.build_needed }}
      tag: ${{ steps.get_latest.outputs.latest_tag }}
      version: ${{ steps.get_latest.outputs.version }}

    steps:
      - name: Install Utilities
        run: sudo apt-get update && sudo apt-get install -y jq curl git

      - name: Get Latest Iosevka Tag Info
        id: get_latest
        run: |
          HTTP_RESPONSE=$(curl -sL -w "%{http_code}" -o response.json "https://api.github.com/repos/be5invis/Iosevka/releases/latest")
          if [ "$HTTP_RESPONSE" -ne 200 ]; then echo "Error fetching latest Iosevka release: HTTP $HTTP_RESPONSE"; cat response.json; exit 1; fi
          IOSEVKA_TAG=$(jq -r .tag_name response.json)
          if [[ ! "$IOSEVKA_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then echo "Error: Invalid tag format ('$IOSEVKA_TAG')."; exit 1; fi
          IOSEVKA_VER=$(echo "$IOSEVKA_TAG" | sed 's/^v//')
          echo "Latest Version: $IOSEVKA_VER"

      - name: Check if latest version exists
        id: check_local
        run: |
          EXPECTED_TAG="${{ steps.get_latest.outputs.version }}"
          git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"

          if git rev-parse "$EXPECTED_TAG" >/dev/null 2>&1; then
            echo "Tag $EXPECTED_TAG already exists. No build needed."
            echo "build_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $EXPECTED_TAG does not exist. Build is needed."
            echo "build_needed=true" >> $GITHUB_OUTPUT
          fi

  patch:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build_needed == 'true'

    env:
      FONT_NAME: "IosevkaTermSS04"
      TAG: ${{ needs.check.outputs.latest_tag }}
      VERSION: ${{ needs.check.outputs.version }}

    steps:
      - name: Setup Core Dependencies
        run: |
          sudo apt update -y -q
          sudo apt install software-properties-common unzip curl -y -q

      - name: Install FontForge
        env:
          FF_VERSION: "20230101"
          FF_ARCHIVE_TYPE: "tar.xz"
        run: |
          sudo apt install libjpeg-dev libtiff5-dev libpng-dev libfreetype6-dev libgif-dev libgtk-3-dev libxml2-dev libpango1.0-dev libcairo2-dev libspiro-dev python3-dev ninja-build cmake build-essential gettext libuninameslist-dev -y -q
          curl -L "https://github.com/fontforge/fontforge/releases/download/${{ env.FF_VERSION }}/fontforge-${{ env.FF_VERSION }}.${{ env.FF_ARCHIVE_TYPE }}" \
            --output "FontForge.${{ env.FF_ARCHIVE_TYPE }}"
          tar -xf "FontForge.${{ env.FF_ARCHIVE_TYPE }}"
          cd "fontforge-${{ env.FF_VERSION }}/"
          mkdir build
          cd build
          cmake -GNinja ..
          ninja
          sudo ninja install
          which fontforge
          fontforge --version

      - name: Download Font Patcher
        run: |
          curl -L "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FontPatcher.zip" -o "FontPatcher.zip"
          unzip "FontPatcher.zip"
          ls -lh
          chmod +x ./font-patcher

      - name: Download the Iosevka Font
        run: |
          mkdir -p $GITHUB_WORKSPACE/downloaded_font
          curl -L "https://github.com/be5invis/Iosevka/releases/download/latest/SuperTTC-SGr-${{ env.FONT_NAME }}-${{ env.VERSION }}.zip" \
            -o "$GITHUB_WORKSPACE/downloaded_font/${{ env.FONT_NAME }}.zip"
          unzip "$GITHUB_WORKSPACE/downloaded_font/${{ env.FONT_NAME }}.zip" -d "$GITHUB_WORKSPACE/downloaded_font"

      - name: Patch the Iosevka Font
        run: |
          mkdir -p $GITHUB_WORKSPACE/patched_font
          fontforge --script ./font-patcher "$GITHUB_WORKSPACE/downloaded_font/SGr-${{ env.FONT_NAME }}.ttc" \
            --complete --quiet --no-progressbars --outputdir $GITHUB_WORKSPACE/patched_font/
          ls -lh "$GITHUB_WORKSPACE/patched_font"
